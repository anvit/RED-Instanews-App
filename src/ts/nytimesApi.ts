/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.4.0 (NJsonSchema v9.10.29.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as jQuery from 'jquery';

export module nyt.api {
namespace nyt.api.topstores {

export class Client {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "http://api.nytimes.com/svc/topstories/v2";
    }

    /**
     * Top Stories
     * @section The section the story appears in.
     * @format if this is JSONP or JSON
     * @callback (optional) The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback.
     * @return An array of articles
     */
    topStories(section: Section, format: Format, callback: string | null | undefined, onSuccess?: (result: Anonymous) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/{section}.{format}?";
        if (section === undefined || section === null)
            throw new Error("The parameter 'section' must be defined.");
        url_ = url_.replace("{section}", encodeURIComponent("" + section));
        if (format === undefined || format === null)
            throw new Error("The parameter 'format' must be defined.");
        url_ = url_.replace("{format}", encodeURIComponent("" + format));
        if (callback !== undefined)
            url_ += "callback=" + encodeURIComponent("" + callback) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });

        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTopStoriesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTopStoriesWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTopStoriesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTopStories(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTopStories(xhr: any): Anonymous {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Anonymous.fromJS(resultData200) : new Anonymous();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class Article implements IArticle {
    section?: string | undefined;
    subsection?: string | undefined;
    title?: string | undefined;
    abstract?: string | undefined;
    url?: string | undefined;
    thumbnail_standard?: string | undefined;
    short_url?: string | undefined;
    byline?: string | undefined;
    item_type?: string | undefined;
    updated_date?: string | undefined;
    created_date?: string | undefined;
    published_date?: string | undefined;
    material_type_facet?: string | undefined;
    kicker?: string | undefined;
    des_facet?: string[] | undefined;
    org_facet?: string[] | undefined;
    per_facet?: string[] | undefined;
    geo_facet?: string[] | undefined;
    multimedia?: Multimedia[] | undefined;
    related_urls?: Related_urls[] | undefined;

    constructor(data?: IArticle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.section = data["section"];
            this.subsection = data["subsection"];
            this.title = data["title"];
            this.abstract = data["abstract"];
            this.url = data["url"];
            this.thumbnail_standard = data["thumbnail_standard"];
            this.short_url = data["short_url"];
            this.byline = data["byline"];
            this.item_type = data["item_type"];
            this.updated_date = data["updated_date"];
            this.created_date = data["created_date"];
            this.published_date = data["published_date"];
            this.material_type_facet = data["material_type_facet"];
            this.kicker = data["kicker"];
            if (data["des_facet"] && data["des_facet"].constructor === Array) {
                this.des_facet = [];
                for (let item of data["des_facet"])
                    this.des_facet.push(item);
            }
            if (data["org_facet"] && data["org_facet"].constructor === Array) {
                this.org_facet = [];
                for (let item of data["org_facet"])
                    this.org_facet.push(item);
            }
            if (data["per_facet"] && data["per_facet"].constructor === Array) {
                this.per_facet = [];
                for (let item of data["per_facet"])
                    this.per_facet.push(item);
            }
            if (data["geo_facet"] && data["geo_facet"].constructor === Array) {
                this.geo_facet = [];
                for (let item of data["geo_facet"])
                    this.geo_facet.push(item);
            }
            if (data["multimedia"] && data["multimedia"].constructor === Array) {
                this.multimedia = [];
                for (let item of data["multimedia"])
                    this.multimedia.push(Multimedia.fromJS(item));
            }
            if (data["related_urls"] && data["related_urls"].constructor === Array) {
                this.related_urls = [];
                for (let item of data["related_urls"])
                    this.related_urls.push(Related_urls.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Article {
        data = typeof data === 'object' ? data : {};
        let result = new Article();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["section"] = this.section;
        data["subsection"] = this.subsection;
        data["title"] = this.title;
        data["abstract"] = this.abstract;
        data["url"] = this.url;
        data["thumbnail_standard"] = this.thumbnail_standard;
        data["short_url"] = this.short_url;
        data["byline"] = this.byline;
        data["item_type"] = this.item_type;
        data["updated_date"] = this.updated_date;
        data["created_date"] = this.created_date;
        data["published_date"] = this.published_date;
        data["material_type_facet"] = this.material_type_facet;
        data["kicker"] = this.kicker;
        if (this.des_facet && this.des_facet.constructor === Array) {
            data["des_facet"] = [];
            for (let item of this.des_facet)
                data["des_facet"].push(item);
        }
        if (this.org_facet && this.org_facet.constructor === Array) {
            data["org_facet"] = [];
            for (let item of this.org_facet)
                data["org_facet"].push(item);
        }
        if (this.per_facet && this.per_facet.constructor === Array) {
            data["per_facet"] = [];
            for (let item of this.per_facet)
                data["per_facet"].push(item);
        }
        if (this.geo_facet && this.geo_facet.constructor === Array) {
            data["geo_facet"] = [];
            for (let item of this.geo_facet)
                data["geo_facet"].push(item);
        }
        if (this.multimedia && this.multimedia.constructor === Array) {
            data["multimedia"] = [];
            for (let item of this.multimedia)
                data["multimedia"].push(item.toJSON());
        }
        if (this.related_urls && this.related_urls.constructor === Array) {
            data["related_urls"] = [];
            for (let item of this.related_urls)
                data["related_urls"].push(item.toJSON());
        }
        return data;
    }
}

export interface IArticle {
    section?: string | undefined;
    subsection?: string | undefined;
    title?: string | undefined;
    abstract?: string | undefined;
    url?: string | undefined;
    thumbnail_standard?: string | undefined;
    short_url?: string | undefined;
    byline?: string | undefined;
    item_type?: string | undefined;
    updated_date?: string | undefined;
    created_date?: string | undefined;
    published_date?: string | undefined;
    material_type_facet?: string | undefined;
    kicker?: string | undefined;
    des_facet?: string[] | undefined;
    org_facet?: string[] | undefined;
    per_facet?: string[] | undefined;
    geo_facet?: string[] | undefined;
    multimedia?: Multimedia[] | undefined;
    related_urls?: Related_urls[] | undefined;
}

/** The section the story appears in. */
export enum Section {
    Home = <any>"home",
    Opinion = <any>"opinion",
    World = <any>"world",
    National = <any>"national",
    Politics = <any>"politics",
    Upshot = <any>"upshot",
    Nyregion = <any>"nyregion",
    Business = <any>"business",
    Technology = <any>"technology",
    Science = <any>"science",
    Health = <any>"health",
    Sports = <any>"sports",
    Arts = <any>"arts",
    Books = <any>"books",
    Movies = <any>"movies",
    Theater = <any>"theater",
    Sundayreview = <any>"sundayreview",
    Fashion = <any>"fashion",
    Tmagazine = <any>"tmagazine",
    Food = <any>"food",
    Travel = <any>"travel",
    Magazine = <any>"magazine",
    Realestate = <any>"realestate",
    Automobiles = <any>"automobiles",
    Obituaries = <any>"obituaries",
    Insider = <any>"insider",
}

/** if this is JSONP or JSON */
export enum Format {
    Json = <any>"json",
    Jsonp = <any>"jsonp",
}

export class Anonymous implements IAnonymous {
    results?: Article[] | undefined;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(Article.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous {
    results?: Article[] | undefined;
}

export class Multimedia implements IMultimedia {
    url?: string | undefined;
    format?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    type?: string | undefined;
    subtype?: string | undefined;
    caption?: string | undefined;
    copyright?: string | undefined;

    constructor(data?: IMultimedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.url = data["url"];
            this.format = data["format"];
            this.height = data["height"];
            this.width = data["width"];
            this.type = data["type"];
            this.subtype = data["subtype"];
            this.caption = data["caption"];
            this.copyright = data["copyright"];
        }
    }

    static fromJS(data: any): Multimedia {
        data = typeof data === 'object' ? data : {};
        let result = new Multimedia();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["format"] = this.format;
        data["height"] = this.height;
        data["width"] = this.width;
        data["type"] = this.type;
        data["subtype"] = this.subtype;
        data["caption"] = this.caption;
        data["copyright"] = this.copyright;
        return data;
    }
}

export interface IMultimedia {
    url?: string | undefined;
    format?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    type?: string | undefined;
    subtype?: string | undefined;
    caption?: string | undefined;
    copyright?: string | undefined;
}

export class Related_urls implements IRelated_urls {
    suggested_link_text?: string | undefined;
    url?: string | undefined;

    constructor(data?: IRelated_urls) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.suggested_link_text = data["suggested_link_text"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): Related_urls {
        data = typeof data === 'object' ? data : {};
        let result = new Related_urls();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["suggested_link_text"] = this.suggested_link_text;
        data["url"] = this.url;
        return data;
    }
}

export interface IRelated_urls {
    suggested_link_text?: string | undefined;
    url?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

}
}
